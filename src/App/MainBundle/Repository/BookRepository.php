<?php

namespace App\MainBundle\Repository;

use Doctrine\ORM\EntityRepository;
use App\MainBundle\Entity\Book;

/**
 * BookRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BookRepository extends EntityRepository
{
    public function create(){
        return new Book();
    }

    public function save(Book $book){
        $this->getEntityManager()->persist($book);
        $this->getEntityManager()->flush();
    }

    public function selectBooksWithSubAuthors(){
        $books = $this->findAll();
        $res = [];
        $authors = [];
        foreach($books as $b){
            $elements = $b->getAuthors()->getValues();
            if(count($elements) > 1) {
                foreach ($b->getAuthors() as $a) {
                    if (array_key_exists($b->getId(), $authors)) {
                        array_push($authors[$b->getId()], $a->getName());
                    } else {
                        $authors[$b->getId()] = [$a->getName()];
                    }
                }
            $res[$b->getId()]['authors'] = $authors[$b->getId()];
            }
        }

        return $res;

    }

    public function load($page, $limit, $offset){
        $qb = $this->createQueryBuilder('q');

        $qb
           ->setMaxResults($limit)
           ->setFirstResult(($page - 1) * $offset);

        return $qb->getQuery()->getResult();
    }

    public function getFilterData($page, $limit, $offset, $formData, $toFilter){

        $params = [];
        $qb = $this->createQueryBuilder('b');

        if($formData['title']){
            $qb->andWhere('b.title LIKE :title');
            $params['title'] = '%' . $formData['title'] . '%';
        }

        if($formData['isbn'] && $formData['isbn'] != ""){
            $qb->andWhere('b.isbn LIKE :isbn');
            $params['isbn'] = '%' . $formData['isbn'] . '%';
        }

        if($formData['genre'] && $formData['genre'] != ""){
            $qb->innerJoin('b.genre', 'g')
               ->andWhere('g.type LIKE :genre');
            $params['genre'] = '%' . $formData['genre'] . '%';
        }

        if(count($formData['authors']) && $formData['authors'] != "" ){
            $qb
                ->innerJoin('b.authors', 'a')
                ->andWhere('a.id IN(:authors)');
            $params['authors'] = array_values($formData['authors']);
        }

        $qb
            ->setParameters($params);

        if($toFilter){
            $qb
                ->setMaxResults($limit)
                ->setFirstResult(($page - 1) * $offset);
        }

        return $qb->getQuery()->getResult();
    }
}
